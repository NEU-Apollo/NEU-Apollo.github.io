<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git更改默认的编辑器</title>
      <link href="/2025/07/12/git%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2025/07/12/git%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>git更改默认的编辑器</p><p>git默认的编辑器是<code>nano</code>，可以将默认编辑器改为 <code>vim</code>、<code>code</code>（VS Code）、<code>nvim</code> 等。</p><hr><h3 id="方法一：临时更改（只对当前命令有效）"><a href="#方法一：临时更改（只对当前命令有效）" class="headerlink" title="方法一：临时更改（只对当前命令有效）"></a>方法一：临时更改（只对当前命令有效）</h3><p>使用 <code>GIT_EDITOR</code> 环境变量临时指定编辑器，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GIT_EDITOR=vim git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GIT_EDITOR=<span class="string">&quot;code --wait&quot;</span> git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>注意：VS Code 需要加 <code>--wait</code>，否则它会立即返回，导致 rebase 失败。</p><hr><h3 id="方法二：永久更改"><a href="#方法二：永久更改" class="headerlink" title="方法二：永久更改"></a>方法二：永久更改</h3><p>你可以通过 Git 配置更改默认编辑器：</p><h4 id="设置为-vim："><a href="#设置为-vim：" class="headerlink" title="设置为 vim："></a>设置为 <code>vim</code>：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor <span class="string">&quot;vim&quot;</span></span><br></pre></td></tr></table></figure><h4 id="设置为-nano（默认就是它）："><a href="#设置为-nano（默认就是它）：" class="headerlink" title="设置为 nano（默认就是它）："></a>设置为 <code>nano</code>（默认就是它）：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor <span class="string">&quot;nano&quot;</span></span><br></pre></td></tr></table></figure><h4 id="设置为-VS-Code："><a href="#设置为-VS-Code：" class="headerlink" title="设置为 VS Code："></a>设置为 <code>VS Code</code>：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br></pre></td></tr></table></figure><h4 id="设置为-nvim（Neovim）："><a href="#设置为-nvim（Neovim）：" class="headerlink" title="设置为 nvim（Neovim）："></a>设置为 <code>nvim</code>（Neovim）：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor <span class="string">&quot;nvim&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="查看当前配置的编辑器"><a href="#查看当前配置的编辑器" class="headerlink" title="查看当前配置的编辑器"></a>查看当前配置的编辑器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.editor</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git合并最近几次的提交</title>
      <link href="/2025/07/12/git%E5%90%88%E5%B9%B6%E6%9C%80%E8%BF%91%E5%87%A0%E6%AC%A1%E7%9A%84%E6%8F%90%E4%BA%A4/"/>
      <url>/2025/07/12/git%E5%90%88%E5%B9%B6%E6%9C%80%E8%BF%91%E5%87%A0%E6%AC%A1%E7%9A%84%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>比如要合并最近三次的提交<br>使用<code>git rebase -i HEAD~3</code>命令即可。</p><p>将显示的提交记录进行修改，将前几次的<code>pick</code>改为<code>squash</code>（理论上留下一个pick即可）</p><p>保存后即可完成合并，使用<code>git push -f</code>更新远端仓库。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>-march=native -mavx512f 两个编译选项</title>
      <link href="/2025/07/06/-march=native%20-mavx512f%20%E4%B8%A4%E4%B8%AA%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/"/>
      <url>/2025/07/06/-march=native%20-mavx512f%20%E4%B8%A4%E4%B8%AA%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>这两个编译选项是用于 GCC 或 Clang 编译器的 CPU 指令集优化选项：</p><h2 id="1-march-native"><a href="#1-march-native" class="headerlink" title="1. -march&#x3D;native"></a>1. -march&#x3D;native</h2><ul><li>作用：让编译器自动检测并使用当前运行的 CPU 支持的所有指令集和优化选项进行编译。</li><li>影响：<ul><li>生成的二进制代码可能无法在其他 CPU 上运行（因为它可能使用了目标 CPU 独有的指令集）。</li><li>适用于编译仅在本机运行的程序，以获得最佳性能。</li></ul></li><li>示例：<br>gcc -march&#x3D;native -o my_program my_program.c</li><li>这会针对本机 CPU 进行优化，比如如果 CPU 支持 AVX2、SSE4.2 等，编译器就会启用相应优化。</li></ul><h2 id="2-mavx512f"><a href="#2-mavx512f" class="headerlink" title="2. -mavx512f"></a>2. -mavx512f</h2><ul><li>作用：显式启用 AVX-512 Foundation（AVX-512F）指令集支持。</li><li>影响：<ul><li>生成的代码会使用 AVX-512F 指令集（如果适用）。</li><li>运行时要求目标 CPU 必须支持 AVX-512F，否则可能崩溃或运行报错。</li><li>AVX-512F 是 AVX-512 指令集的基础部分，几乎所有 AVX-512 兼容 CPU 都支持。</li></ul></li><li>示例：<br>gcc -mavx512f -o my_program my_program.c</li><li>这会强制使用 AVX-512F 指令，适用于需要大规模 SIMD 计算的场景，如科学计算、机器学习等。</li></ul><hr><h2 id="二者的关系"><a href="#二者的关系" class="headerlink" title="二者的关系"></a>二者的关系</h2><ul><li>-march&#x3D;native 可能会隐式启用 -mavx512f，如果你的 CPU 支持 AVX-512F。</li><li>但如果 -march&#x3D;native 没有启用 AVX-512F（比如因为你的 CPU 不支持），你可以单独加上 -mavx512f 强制启用（但在不支持的 CPU 上运行会失败）。<br>如果你的 CPU 不支持 AVX-512F，而你强行加上 -mavx512f，编译时可能不会报错，但运行时可能会遇到非法指令错误（Illegal instruction）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCEH_hash_split_and_directory_doubling_demo</title>
      <link href="/2025/07/06/CCEH-hash-split-and-directory-doubling-demo/"/>
      <url>/2025/07/06/CCEH-hash-split-and-directory-doubling-demo/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/07/06/CCEH-hash-split-and-directory-doubling-demo/diagram.png" alt="Alt text"><br><img src="/2025/07/06/CCEH-hash-split-and-directory-doubling-demo/image.png" alt="Alt text"></p>]]></content>
      
      
      <categories>
          
          <category> paper note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器为基础 编译运行minob</title>
      <link href="/2025/07/06/docker-based-compile-minob/"/>
      <url>/2025/07/06/docker-based-compile-minob/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-容器的创建、attach与退出-ubuntu为例"><a href="#docker-容器的创建、attach与退出-ubuntu为例" class="headerlink" title="docker 容器的创建、attach与退出(ubuntu为例)"></a>docker 容器的创建、attach与退出(ubuntu为例)</h1><ol><li>需要先pull一个ubuntu 20.04的镜像</li></ol><p><img src="/2025/07/06/docker-based-compile-minob/image-1.png"></p><ul><li>创建容器</li></ul><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line">docker run -it --name minob_ubuntu --privileged -v /mnt/c/NonSystemThing/docker_file_shared/miniob:/root/docker_file_shared ubuntu:<span class="number">20.04</span></span><br></pre></td></tr></table></figure><p><img src="/2025/07/06/docker-based-compile-minob/image-2.png"></p><blockquote><p>可以通过以下两种方法之一来退出 Docker 容器的命令行，并让容器在后台继续运行：</p><h3 id="方法一：使用-Ctrl-P-和-Ctrl-Q-组合键"><a href="#方法一：使用-Ctrl-P-和-Ctrl-Q-组合键" class="headerlink" title="方法一：使用 Ctrl + P 和 Ctrl + Q 组合键"></a>方法一：使用 <code>Ctrl + P</code> 和 <code>Ctrl + Q</code> 组合键</h3><p>这是 Docker 提供的一个快捷方式，用于让容器在后台继续运行而不退出容器。</p><ol><li><p>进入容器后，不要直接输入 <code>exit</code>。</p></li><li><p>按下 <code>Ctrl + P</code>，然后按 <code>Ctrl + Q</code>。这会把你从容器的交互模式中分离出来，但容器会继续在后台运行。</p></li></ol><h3 id="方法二：使用-docker-exec-进入容器并运行新的命令"><a href="#方法二：使用-docker-exec-进入容器并运行新的命令" class="headerlink" title="方法二：使用 docker exec 进入容器并运行新的命令"></a>方法二：使用 <code>docker exec</code> 进入容器并运行新的命令</h3><p>你也可以选择进入已经运行的容器并执行新命令，避免退出当前的进程。</p><ol><li><p>退出当前的交互式容器会话（输入 <code>exit</code>），这时容器会停止。</p></li><li><p>使用以下命令重新进入容器：</p></li><li><p>bash</p></li><li><p>复制编辑</p></li><li><p><code>docker exec -it minob_ubuntu bash</code></p></li><li><p>这样你可以进入容器并执行新的命令。</p></li></ol></blockquote><blockquote><p>想要再次进入容器命令行：</p><h3 id="docker-attach命令"><a href="#docker-attach命令" class="headerlink" title="docker attach命令"></a><code>docker attach</code>命令</h3><ul><li><p><strong>附加到主进程</strong>：<code>docker attach</code> 会连接到容器的主进程（即容器启动时指定的命令，比如用 <code>docker run -it ubuntu:20.04 bash</code> 启动的容器，主进程是 <code>bash</code>）。</p></li><li><p><strong>会共享输入输出</strong>：直接与主进程的输入输出进行交互。如果主进程终止（例如你退出了 <code>bash</code>），容器也会停止。</p></li><li><p><strong>无法启动新的进程</strong>：无法在容器中启动额外的进程，只能与容器的主进程进行交互。</p></li></ul><h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a><code>docker exec</code></h3><ul><li><p><strong>启动新进程</strong>：<code>docker exec</code> 允许你在容器中启动一个新的进程，而不会干扰主进程。你可以启动一个新的 shell 或其他命令。</p></li><li><p><strong>不会影响容器的状态</strong>：即使你通过 <code>docker exec</code> 启动新的进程并退出，它不会导致主进程（或容器）停止运行。</p></li><li><p><strong>多次执行</strong>：你可以多次使用 <code>docker exec</code> 进入容器并启动多个不同的进程。</p></li></ul><h3 id="主要区别："><a href="#主要区别：" class="headerlink" title="主要区别："></a>主要区别：</h3><ol><li><p><strong><code>attach</code></strong> 连接到容器的主进程，并且与该进程共享输入和输出。如果主进程结束，容器会停止。</p></li><li><p><strong><code>exec</code></strong> 启动新的进程，不会影响容器的主进程，因此可以进行多次交互。</p></li></ol><h3 id="具体场景中："><a href="#具体场景中：" class="headerlink" title="具体场景中："></a>具体场景中：</h3><ul><li><p>如果希望继续与容器的主进程（例如 <code>bash</code>）交互，可以使用 <code>docker attach</code>。</p></li><li><p>如果希望启动一个新的 <code>bash</code> 进程并继续使用容器而不影响主进程，可以使用 <code>docker exec</code>。</p></li></ul><p>如果你使用 <code>docker attach</code> 后想退出，只需要按 <code>Ctrl + C</code>，但这可能会导致容器退出。如果你希望保留容器继续运行并退出当前会话，<code>docker exec</code> 是更好的选择。</p><p>因此推荐使用<code>docker exec -it minob_ubuntu bash</code>命令再次进入容器</p></blockquote><ul><li>如果想关闭容器，可以使用<code>docker stop minob_ubuntu</code>命令</li></ul><p><img src="/2025/07/06/docker-based-compile-minob/image.png"></p><ul><li>启动刚刚创建的docker容器</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start minob_ubuntu</span><br></pre></td></tr></table></figure><p>这个命令会启动容器，但不会自动进入容器的交互模式。如果希望在启动容器后进入交互模式，可以执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start -i minob_ubuntu</span><br></pre></td></tr></table></figure><p><code>-i</code> 选项会在启动容器时将你附加到容器的标准输入输出流，这样你就可以进入容器的 shell。</p><p>另外，使用 <code>docker ps</code> 查看容器状态时，容器会显示为“Up”，表示已经成功启动。</p><p><img src="/2025/07/06/docker-based-compile-minob/image-3.png"></p><ul><li>安装必要的库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update <span class="comment"># essential</span></span><br><span class="line">apt upgrade</span><br><span class="line">apt-get install <span class="built_in">sudo</span></span><br><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><h1 id="minob编译"><a href="#minob编译" class="headerlink" title="minob编译"></a>minob编译</h1><p>拉取仓库：</p><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/oceanbase/miniob </span></span><br></pre></td></tr></table></figure><hr><p>之后可以参考文档进行build <a href="https://github.com/oceanbase/miniob/blob/main/docs/docs/how/_to/_build.md">https://github.com/oceanbase/miniob/blob/main/docs/docs/how\_to\_build.md</a></p><ol><li>拉取对应的依赖</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash build.sh init</span><br></pre></td></tr></table></figure><ul><li>编译链接minob</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash build.sh (build/release) --make -j</span><br></pre></td></tr></table></figure><p>之后可以参考文档运行 <a href="https://github.com/oceanbase/miniob/blob/main/docs/docs/how/_to/_run.md">https://github.com/oceanbase/miniob/blob/main/docs/docs/how\_to\_run.md</a></p><hr><h1 id="vscode使用cpptools插件编译与运行配置"><a href="#vscode使用cpptools插件编译与运行配置" class="headerlink" title="vscode使用cpptools插件编译与运行配置"></a>vscode使用cpptools插件编译与运行配置</h1><p>c_cpp_properties.json（ctrl+P: edit…）</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang-14&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux-clang-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configurationProvider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ms-vscode.cpptools&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compileCommands&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build/compile_commands.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>launch.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Debug&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/<span class="variable">$&#123;defaultBuildTask&#125;</span>/bin/observer&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/etc/observer.ini&quot;</span>, <span class="string">&quot;-P&quot;</span>, <span class="string">&quot;cli&quot;</span>],</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/<span class="variable">$&#123;defaultBuildTask&#125;</span>/&quot;</span>,</span><br><span class="line">            <span class="string">&quot;internalConsoleOptions&quot;</span>: <span class="string">&quot;openOnSessionStart&quot;</span>,</span><br><span class="line">            <span class="string">&quot;osx&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;MIMode&quot;</span>: <span class="string">&quot;lldb&quot;</span>,</span><br><span class="line">                <span class="string">&quot;externalConsole&quot;</span>:<span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;stopAtEntry&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        // &#123;</span><br><span class="line">        //     <span class="string">&quot;type&quot;</span>: <span class="string">&quot;lldb&quot;</span>,</span><br><span class="line">        //     <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">        //     <span class="string">&quot;name&quot;</span>: <span class="string">&quot;LLDB&quot;</span>,</span><br><span class="line">        //     <span class="string">&quot;program&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/<span class="variable">$&#123;defaultBuildTask&#125;</span>/bin/observer&quot;</span>,</span><br><span class="line">        //     <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/etc/observer.ini&quot;</span>, <span class="string">&quot;-P&quot;</span>, <span class="string">&quot;cli&quot;</span>],</span><br><span class="line">        //     <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/<span class="variable">$&#123;defaultBuildTask&#125;</span>/&quot;</span></span><br><span class="line">        // &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build and Deploy Hexo-based github pages</title>
      <link href="/2025/07/06/Build%20and%20Deploy%20Hexo-based%20github%20pages/"/>
      <url>/2025/07/06/Build%20and%20Deploy%20Hexo-based%20github%20pages/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="官方文档（自动生成）-Quick-Start"><a href="#官方文档（自动生成）-Quick-Start" class="headerlink" title="官方文档（自动生成） Quick Start"></a>官方文档（自动生成） Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="个人实践"><a href="#个人实践" class="headerlink" title="个人实践"></a>个人实践</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;YuanBlog&quot;</span></span><br></pre></td></tr></table></figure><h3 id="下载theme主题"><a href="#下载theme主题" class="headerlink" title="下载theme主题"></a>下载theme主题</h3><p><a href="https://hexo.io/themes/">hexo 主题</a></p><p>本主题下载地址：<a href="https://github.com/Litreily/hexo-theme-snark">hexo-theme-snark</a></p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><ol><li>将主题文件复制到themes目录下</li><li>修改_config.yml文件：找到theme字段，将值改为主题文件名</li><li>按照具体主题的具体要求修改_config.yml，npm下载相应的主题依赖包</li></ol><h3 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files-1"><a href="#Generate-static-files-1" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="部署到github-pages"><a href="#部署到github-pages" class="headerlink" title="部署到github pages"></a>部署到github pages</h3><ol><li>创建一个github pages仓库</li><li>修改_config.yml文件：</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/NEU-Apollo/NEU-Apollo.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="3"><li>npm下载git部署所需的依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
